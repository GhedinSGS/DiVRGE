# Author: Kate Johnson
# module load snakemake/6.12.3
# snakemake -c2 --use-envmodules -s snakefile_divrge_only

import re
VERSION = 1.3

configfile: "config_divrge.yaml"


BAMS, = glob_wildcards(config["params"]["bamdir"] + "/{sample}" + config["params"]["bam_ending"])
SAMPLES = sorted(set([x for x in BAMS if "Undetermined" not in x]))
print(SAMPLES)

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in SAMPLES])

rule all:
    input:
        expand(config["params"]["bamdir"] + "/{sample}" + config["params"]["bam_ending"], sample = SAMPLES),
        expand(config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt", sample = SAMPLES),
        expand(config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv", sample = SAMPLES),
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.csv",
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt",
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt.summary",
        config["params"]["gtf_dir"] + "/"  + config["params"]["strain"].upper() + ".gtf",
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",

rule make_gtf:
    input:
        ref=config["params"]["ref"],
    output:
        gtf_file=config["params"]["gtf_dir"] + "/"  + config["params"]["strain"].upper() + ".gtf",
    group: "post"
    params:
        gtf_dir=config["params"]["gtf_dir"],
        strain=config["params"]["strain"].upper(),
	script_dir=config["params"]["script_dir"],
    envmodules:
        config["mod_params"]["python_mod"],
    shell:
        """
        python3 {params.script_dir}make_gtf.py \
                -r {input.ref} \
                -s {params.gtf_dir} \
                -p {params.strain}
        """

rule prep_deletions:
    input:
        rmd_bam=expand(config["params"]["bamdir"] + "/{sample}" + config["params"]["bam_ending"], sample = SAMPLES),
        gtf_file=config["params"]["gtf_dir"] + "/"  + config["params"]["strain"].upper() + ".gtf",
    output:
        feat_file_csv=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.csv",
        feat_file_txt=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt",
        feat_file_summ=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt.summary",
    group: "post"
    params:
        direct=config["params"]["output"] + "N_files/"
    threads: 4
    envmodules:
        config["mod_params"]["subread_mod"],
    shell:
        """
        featureCounts -T 4 -B -p -t exon -a {input.gtf_file} -o {output.feat_file_txt} {input.rmd_bam}
        sed -i '1d' {output.feat_file_txt}
        sed 's/\t/,/g' {output.feat_file_txt} > {output.feat_file_csv}
        #rm -r {params.direct}
        """


rule pull_split:
    input:
        rmd_bam=config["params"]["bamdir"] + "/{sample}" + config["params"]["bam_ending"],
    output:
        split_txt =config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt"
    group: "post"
    params:
        name_param="{sample}"
    envmodules:
        config["mod_params"]["samtools_mod"],
    shell:
        """
        echo {input.rmd_bam}
        samtools view {input.rmd_bam} | awk -F'\t' 'index($6, "N")' | cut -f 1,2,3,4,5,6 | uniq  > {output.split_txt}
        touch {output.split_txt}
        echo {params.name_param}
        sed -i "s/$/\t{params.name_param}/" {output.split_txt}
        sed -i 's/\t/,/g' {output.split_txt}
        sed -i 1i"readname,flags,segment,left_pos,mapq,cigar,name" {output.split_txt}
        """

rule divrge:
    input:
        ref=config["params"]["ref"],
        features=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.csv",
        deletions=config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt",
    output:
        final_one=config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv"
    group: "post"
    params:
        strain=config["params"]["strain"].upper(),
        mis=config["divrge_param"]["mismatch"],
        gap_size=config["divrge_param"]["gap_size"],
        align_len=config["divrge_param"]["align_length"],
        group_size=config["divrge_param"]["group_size"],
        save_dir=config["params"]["output"] + "DVG/",
        script_dir=config["params"]["script_dir"],
        env_path=config["params"]["venv_path"],
        ninput=config["divrge_param"]["ninput"],
        njob_number=config["divrge_param"]["ncores"],
    envmodules:
        config["mod_params"]["python_mod"],
    threads:2,
    shell:
        """
        source {params.env_path}

        python3 {params.script_dir}DiVRGE.py \
            --strain {params.strain} \
            --ref {input.ref} \
            --file {input.deletions} \
            --idx {input.features} \
            --save_dir {params.save_dir} \
            --align_length {params.align_len} \
            --gap_size {params.group_size} \
            --total_mismatch {params.mis}  \
            --group_bw {params.group_size} \
            --nbams {params.ninput} \
            --njob {params.njob_number}

        touch {output.final_one}

        deactivate
        """

rule concat_files:
    input:
        dvg_files=expand(config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv", sample = SAMPLES),
    output:
        catfile=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",
    group: "last"
    params:
        direct=config["params"]["output"] + "DVG/",
        strain=config["params"]["strain"].upper()
    shell:
        """
        awk '(NR == 1) || (FNR > 1)' {params.direct}*FINAL.OneGap.{params.strain}* > {output.catfile}
        """
# Author: Kate Johnson
# module load snakemake
# for an interactive session you can run:
# snakemake -c4 --use-envmodules -s snakefile_main_align
# for large batches of samples you can run: jobs = # of samples + 2, align= number of samples you want to group/sbatch run
# The following groups 24 samples (out of 288) during the 'align' steps with the following resources/batch: 4 cpus, 4G memory, 30 minutes
# snakemake --jobs 290 --use-envmodules --group-components align=24 --cluster "sbatch --cpus-per-task=4 --mem=4G --time=00:30:00" --max-jobs-per-second 1 --max-status-checks-per-second 0.01 -s snakefile_align_divrge
# The additional 2 jobs is used to consider the calc and cat rules

VERSION = 4.0

configfile: "config_align.yaml"

import re

FASTQ, = glob_wildcards(config["params"]["reads"] + "/" + config["params"]["begin1"] + "{sample}" + config["params"]["ending1"])
SAMPLES = sorted(set([x for x in FASTQ if "Undetermined" not in x]))
print(SAMPLES)

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in SAMPLES])

rule all:
    input:
        expand(config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq", sample=SAMPLES),
        expand(config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "metric/{sample}.met.bbmap.txt", sample=SAMPLES),
        expand(config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv", sample = SAMPLES),
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",
        expand(config["params"]["output"] + "read_depth/{sample}." + config["params"]["strain"].upper() + ".q" + config['divrge_param']['qual_cutoff'] + ".rd.csv", sample=SAMPLES),
        config["params"]["output"] + "read_depth/" + config["params"]["strain"].upper() + ".rd_calculations.csv",


rule trim:
    input:
        fastq1=config["params"]["reads"] + "/" + config["params"]["begin1"] + "{sample}" + config["params"]["ending1"],
        fastq2=config["params"]["reads"] + "/" + config["params"]["begin2"] + "{sample}" + config["params"]["ending2"],
        primers=config["params"]["primers"],
        primers_rev=config["params"]["rev_primers"]
    output:
        trim1=config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq",
        trim2=config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq",
    group: "align"
    envmodules:
        config["mod_params"]["cutadapt_mod"]
    threads: 16
    shell:
        """
        cutadapt -j{threads} \
            -q 20,20 \
            -Q 20,20 \
            -a file:{input.primers_rev} \
            -g file:{input.primers} \
            -A file:{input.primers_rev} \
            -G file:{input.primers}\
            --action=trim \
            --pair-filter=both \
            --minimum-length=20:20 \
            -o {output.trim1} \
            -p {output.trim2} \
            {input.fastq1} {input.fastq2}
            """


rule bbmap_map:
    input:
        ref=config["params"]["ref"],
        fastq1=config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq",
        fastq2=config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq",
        bbmap_path=config["mod_params"]["bbtools_path"]
    params:
        max_n=config["params"]["maxindel"],
        min_n=config["params"]["minindel"],
        gigs=config["params"]["gigs"]
    output:
        bbmap_sam=temp(config["params"]["output"] + "bamfiles/sam/{sample}.bbmap.sam")
    group: "align"
    threads: 16
    envmodules:
        config["mod_params"]["bbtools"],
    shell:
        """
        {input.bbmap_path}/bbmap.sh -Xmx{params.gigs} sam=1.4 in1={input.fastq1} \
                    in2={input.fastq2} \
                    out={output.bbmap_sam} \
                    ref={input.ref} nodisk \
                    maxindel={params.max_n} \
                    ambig=best \
                    intronlen={params.min_n}
    
        """


rule sort:
    input:
        bbmap_sam=config["params"]["output"] + "bamfiles/sam/{sample}.bbmap.sam",
    output:
        bbmap_bam=temp(config["params"]["output"] + "bamfiles/bam/{sample}.bbmap.bam"),
        bbmap_bam_bai=temp(config["params"]["output"] + "bamfiles/bam/{sample}.bbmap.bam.bai"),
    group: "align"
    threads: 16
    envmodules:
        config["mod_params"]["samtools_mod"],
    shell:
        """
        samtools view -@ {threads} -bSq 20 -F 1036 {input.bbmap_sam} | samtools sort -@ {threads} -o {output.bbmap_bam}

        samtools index {output.bbmap_bam}
        """


rule rmdup:
    input:
        bbmap_bam=config["params"]["output"] + "bamfiles/bam/{sample}.bbmap.bam",
    output:
        rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam",
        met_file=config["params"]["output"] + "metric/{sample}.met.bbmap.txt",
    params:
        picard_jar=config["mod_params"]["picard_jar"],
    group: "align"
    envmodules:
        config["mod_params"]["samtools_mod"],
        config["mod_params"]["picard_mod"],
    shell:
        """
        java -jar {params.picard_jar} MarkDuplicates \
            -I {input.bbmap_bam} \
            -O {output.rmd_bam} \
            -M {output.met_file} \
            -REMOVE_DUPLICATES true

        samtools index {output.rmd_bam}
        """


rule pull_split:
    input:
        rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam",
    output:
        split_txt = temp(config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt"),
        filt_bam=temp(config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".filt.bbmap.bam"),
    group: "align"
    params:
        name_param="{sample}",
        gap_type=config["divrge_param"]["gap_type"]
    envmodules:
        config["mod_params"]["samtools_mod"],
        config["mod_params"]["sambamba"]
    threads: 16
    shell:
        """
        search_char={params.gap_type}
        echo {input.rmd_bam}
        echo $search_char
        sambamba view -t {threads} -f bam --filter 'cigar =~ /([1-9][0-9]+)[=M].*[3-9][0-9]*[N].*([1-9][0-9]+)[=M]/' {input.rmd_bam} -o {output.filt_bam}
        touch {output.filt_bam}
        samtools view {output.filt_bam} | cut -f 1,2,3,4,5,6 | uniq  > {output.split_txt}
        echo {params.name_param}
        sed -i "s/$/\t{params.name_param}/" {output.split_txt}
        sed -i 's/\t/,/g' {output.split_txt}
        sed -i 1i"readname,flags,segment,left_pos,mapq,cigar,name" {output.split_txt}
        """


rule divrge:
    input:
        ref=config["params"]["ref"],
        deletions=config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt",
    output:
        final_one=config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv"
    group: "align"
    params:
        strain=config["params"]["strain"].upper(),
        mis=config["divrge_param"]["mismatch"],
        indel=config["divrge_param"]["indel"],
        gap_size=config["divrge_param"]["gap_size"],
        align_len=config["divrge_param"]["align_length"],
        group_size=config["divrge_param"]["group_size"],
        save_dir=config["params"]["output"] + "DVG/",
        script_dir=config["params"]["script_dir"],
        env_path=config["params"]["venv_path"],
        nbam=config["divrge_param"]["nbam"],
        njob_number=config["divrge_param"]["ncores"],
        gap_type=config["divrge_param"]["gap_type"],
    envmodules:
        config["mod_params"]["python_mod"],
    threads: 16
    shell:
        """
        source {params.env_path}

        python3 {params.script_dir}DiVRGE.py \
            --strain {params.strain} \
            --ref {input.ref} \
            --file {input.deletions} \
            --save_dir {params.save_dir} \
            --align_length {params.align_len} \
            --gap_size {params.gap_size} \
            --total_mismatch {params.mis} \
            --total_indel {params.indel} \
            --group_bw {params.group_size} \
            --nbams {params.nbam} \
            --njob {params.njob_number} \
            --gap_type {params.gap_type}

        touch {output.final_one}

        deactivate
        """


rule ghost_reads:
    input:
        ref=config["params"]["ref"],
        rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam",
    output:
        rd_file=config["params"]["output"] + "read_depth/{sample}." + config["params"]["strain"].upper() + ".q" + config['divrge_param']['qual_cutoff'] + ".rd.csv",
    params:
        strain=config["params"]["strain"].upper(),
        qual_cutoff = config["divrge_param"]["qual_cutoff"],
        env_path = config["params"]["venv_path"],
        output_location=config["params"]["output"] + "read_depth/",
        script_dir=config["params"]["script_dir"],
    threads: 16
    group: "align"
    shell:
        """
        source {params.env_path}

        python3 {params.script_dir}pull_ghost_reads.py \
            --ref {input.ref} \
            --infile {input.rmd_bam}  \
            --qual_cutoff {params.qual_cutoff} \
            --strain {params.strain} \
            --outputdir {params.output_location} \
            --njobs {threads}
        """


rule concat_files:
    input:
        dvg_files=expand(config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv", sample = SAMPLES),
    output:
        catfile=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",
    group: "final"
    params:
        direct=config["params"]["output"] + "DVG/",
        strain=config["params"]["strain"].upper(),
        count_filter=config["divrge_param"]["min_count"]
    shell:
        """
        count_filter={params.count_filter}
        awk '(NR == 1) || (FNR > 1)' {params.direct}*FINAL.OneGap.{params.strain}* | awk -F ',' -v count="$count_filter" '$12 > count' > {output.catfile}
        """


rule make_calcs:
    input:
        rd_files=expand(config["params"]["output"] + "read_depth/{sample}." + config["params"]["strain"].upper() + ".q" + config['divrge_param']['qual_cutoff'] + ".rd.csv", sample = SAMPLES),
        catfile=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",
    output:
        calc_file=config["params"]["output"] + "read_depth/" + config["params"]["strain"].upper() + ".rd_calculations.csv",
    group: "final"
    params:
        direct=config["params"]["output"] + "read_depth/",
        strain=config["params"]["strain"].upper(),
        count_filter=config["divrge_param"]["min_count"]
    shell:
        """
        python3 calculate_abundance.py \
            --path {params.direct} \
            --dvgs {input.catfile} \
            --outfile {output.calc_file}
        """

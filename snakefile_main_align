# Author: Kate Johnson
# module load snakemake/6.12.3
# snakemake -c4 --use-envmodules -s snakefile_main_align

VERSION = 1.3

configfile: "config_align.yaml"

import re

FASTQ, = glob_wildcards(config["params"]["reads"] + "/" + config["params"]["begin1"] + "{sample}" + config["params"]["ending1"])
SAMPLES = sorted(set([x for x in FASTQ if "Undetermined" not in x]))
SEGMENTS = config["timo_params"]["segments"]

#print(SEGMENTS)
#print(FASTQ)
print(SAMPLES)

wildcard_constraints:
    sample='|'.join([re.escape(x) for x in SAMPLES])

rule all:
    input:
        expand(config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq", sample=SAMPLES),
        expand(config["params"]["output"] + "trimmed/{sample}.unpair_trimmed_1.fq", sample=SAMPLES),
        expand(config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq", sample=SAMPLES),
        expand(config["params"]["output"] + "trimmed/{sample}.unpair_trimmed_2.fq", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/sam/{sample}.bbmap.sam", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/bam/{sample}.bbmap.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/bam/{sample}.bwa.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/sorted/{sample}." + config["params"]["strain"].upper() + ".sorted.bbmap.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/sorted/{sample}." + config["params"]["strain"].upper() + ".sorted.bwa.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bwa.bam", sample=SAMPLES),
        expand(config["params"]["output"] + "metric/{sample}.met.bbmap.txt", sample=SAMPLES),
        expand(config["params"]["output"] + "metric/{sample}.met.bwa.txt", sample=SAMPLES),
        expand(config["params"]["output"] + "FILES/fullvarlist/{sample}." + config["params"]["strain"].upper() + ".{segment}." + config["timo_params"]["freq_cutoff"] + ".snplist.csv", sample=SAMPLES, segment=SEGMENTS),
        expand(config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt", sample = SAMPLES),
        expand(config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv", sample = SAMPLES),
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.csv",
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt",
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt.summary",
        config["params"]["gtf_dir"] + "/"  + config["params"]["strain"].upper() + ".gtf",
        config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",

rule trim:
    input:
        fastq1=config["params"]["reads"] + "/" + config["params"]["begin1"] + "{sample}" + config["params"]["ending1"],
        fastq2=config["params"]["reads"] + "/" + config["params"]["begin2"] + "{sample}" + config["params"]["ending2"],
        adapters=config["params"]["adapters"]
    output:
        trim1=config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq",
        unpair1=config["params"]["output"] + "trimmed/{sample}.unpair_trimmed_1.fq",
        trim2=config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq",
        unpair2=config["params"]["output"] + "trimmed/{sample}.unpair_trimmed_2.fq",
    params:
        trimmomatic_jar=config["mod_params"]["trim_jar"],
    group: "align"
    envmodules:
        config["mod_params"]["trim_mod"],
    threads: 4
    shell:
        """
        java -jar {params.trimmomatic_jar} PE \
            -phred33 \
            -threads {threads} \
            {input.fastq1} \
            {input.fastq2} \
            {output.trim1} \
            {output.unpair1} \
            {output.trim2} \
            {output.unpair2} \
            ILLUMINACLIP:{input.adapters}:2:30:10:8:true \
            LEADING:20 \
            TRAILING:20 \
            SLIDINGWINDOW:4:20 \
            MINLEN:20

            touch {output.trim1}
            touch {output.trim2}
            touch {output.unpair1}
            touch {output.unpair2}
            """

rule bbmap_map:
    input:
        ref=config["params"]["ref"],
        fastq1=config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq",
        fastq2=config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq",
        bbmap_path=config["mod_params"]["bbtools_path"]
    params:
        max_n=config["params"]["maxindel"],
        min_n=config["params"]["minindel"],
        gigs=config["params"]["gigs"]
    output:
        bbmap_sam=config["params"]["output"] + "bamfiles/sam/{sample}.bbmap.sam"
    group: "align"
    threads: 4
    envmodules:
        config["mod_params"]["bbtools"],
    shell:
        """
        {input.bbmap_path}/bbmap.sh -Xmx{params.gigs} sam=1.3 in1={input.fastq1} \
                    in2={input.fastq2} \
                    out={output.bbmap_sam} \
                    ref={input.ref} nodisk \
                    maxindel={params.max_n} \
                    ambig=best \
                    intronlen={params.min_n}
        """

rule bwa_map:
    input:
        ref=config["params"]["ref"],
        fastq1=config["params"]["output"] + "trimmed/{sample}_trimmed_1.fq",
        fastq2=config["params"]["output"] + "trimmed/{sample}_trimmed_2.fq"
    output:
        bwa_bam=config["params"]["output"] + "bamfiles/bam/{sample}.bwa.bam"
    group: "align"
    threads: 4
    envmodules:
        config["mod_params"]["samtools_mod"],
        config["mod_params"]["bwa"],
    shell:
        """
        bwa mem {input.ref} {input.fastq1} {input.fastq2} | samtools view -bSq 20 -F 1036 -o {output.bwa_bam}
        """

rule sort:
    input:
        bbmap_sam=config["params"]["output"] + "bamfiles/sam/{sample}.bbmap.sam",
        bwa_bam=config["params"]["output"] + "bamfiles/bam/{sample}.bwa.bam"
    output:
        bbmap_bam=config["params"]["output"] + "bamfiles/bam/{sample}.bbmap.bam",
        sort_bam=config["params"]["output"] + "bamfiles/sorted/{sample}." + config["params"]["strain"].upper() + ".sorted.bbmap.bam",
        bwa_sort_bam=config["params"]["output"] + "bamfiles/sorted/{sample}." + config["params"]["strain"].upper() + ".sorted.bwa.bam"
    group: "align"
    envmodules:
        config["mod_params"]["samtools_mod"],
    shell:
        """
        samtools view -bSq 20 -F 1036 {input.bbmap_sam} > {output.bbmap_bam}

        samtools sort -o \
            {output.sort_bam} \
            {output.bbmap_bam}

        samtools index {output.sort_bam}

        samtools sort -o \
            {output.bwa_sort_bam} \
            {input.bwa_bam}

        samtools index {output.bwa_sort_bam}
        """

rule rmdup:
    input:
        sort_bam=config["params"]["output"] + "bamfiles/sorted/{sample}." + config["params"]["strain"].upper() + ".sorted.bbmap.bam",
        bwa_sort_bam=config["params"]["output"] + "bamfiles/sorted/{sample}." + config["params"]["strain"].upper() + ".sorted.bwa.bam"
    output:
        rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam",
        met_file=config["params"]["output"] + "metric/{sample}.met.bbmap.txt",
        bwa_rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bwa.bam",
        bwa_met_file=config["params"]["output"] + "metric/{sample}.met.bwa.txt",
    params:
        picard_jar=config["mod_params"]["picard_jar"],
    group: "align"
    envmodules:
        config["mod_params"]["samtools_mod"],
        config["mod_params"]["picard_mod"],
    shell:
        """
        java -jar {params.picard_jar} MarkDuplicates \
            -I {input.sort_bam} \
            -O {output.rmd_bam} \
            -M {output.met_file} \
            -REMOVE_DUPLICATES true

        samtools index {output.rmd_bam}

        java -jar $PICARD_JAR MarkDuplicates \
            -I {input.bwa_sort_bam} \
            -O {output.bwa_rmd_bam} \
            -M {output.bwa_met_file} \
            -REMOVE_DUPLICATES true

        samtools index {output.bwa_rmd_bam}
        """

rule timo:
    input:
        ref=config["params"]["ref"],
        rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bwa.bam"
    output:
        snplist_files = ["{0}.{1}.{2}".format(config["params"]["output"] + "FILES/fullvarlist/{sample}." + config["params"]["strain"].upper(), s, config["timo_params"]["freq_cutoff"] + ".snplist.csv") for s in SEGMENTS]
    group: "align"
    params:
        strain=config["params"]["strain"].upper(),
        freq_cutoff = config["timo_params"]["freq_cutoff"],
        cov_cutoff = config["timo_params"]["cov_cutoff"],
        script_dir=config["params"]["script_dir"],
        env_path=config["params"]["venv_path"],
    shell:
        """
        source {params.env_path}

        python3 {params.script_dir}timo.v3.py \
            --strain {params.strain} \
            --infile {input.rmd_bam} \
            --ref {input.ref} \
            --cutoff {params.freq_cutoff} \
            --covercutoff {params.cov_cutoff}
        """

rule make_gtf:
    input:
        ref=config["params"]["ref"],
    output:
        gtf_file=config["params"]["gtf_dir"] + "/"  + config["params"]["strain"].upper() + ".gtf",
    group: "post"
    params:
        gtf_dir=config["params"]["gtf_dir"],
        strain=config["params"]["strain"].upper(),
	script_dir=config["params"]["script_dir"],
    envmodules:
        config["mod_params"]["python_mod"],
    shell:
        """
        python3 {params.script_dir}make_gtf.py \
                -r {input.ref} \
                -s {params.gtf_dir} \
                -p {params.strain}
        """

rule prep_deletions:
    input:
        rmd_bam=expand(config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam", sample = SAMPLES),
        gtf_file=config["params"]["gtf_dir"] + "/"  + config["params"]["strain"].upper() + ".gtf",
    output:
        feat_file_csv=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.csv",
        feat_file_txt=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt",
        feat_file_summ=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.txt.summary",
    group: "post"
    params:
        direct=config["params"]["output"] + "N_files/"
    threads: 4
    envmodules:
        config["mod_params"]["subread_mod"],
    shell:
        """
        featureCounts -T 4 -B -p -t exon -a {input.gtf_file} -o {output.feat_file_txt} {input.rmd_bam}
        sed -i '1d' {output.feat_file_txt}
        sed 's/\t/,/g' {output.feat_file_txt} > {output.feat_file_csv}
        #rm -r {params.direct}
        """


rule pull_split:
    input:
        rmd_bam=config["params"]["output"] + "bamfiles/rmdups/{sample}." + config["params"]["strain"].upper() + ".rmd.bbmap.bam",
    output:
        split_txt =config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt"
    group: "post"
    params:
        name_param="{sample}"
    envmodules:
        config["mod_params"]["samtools_mod"],
    shell:
        """
        echo {input.rmd_bam}
        samtools view {input.rmd_bam} | awk -F'\t' 'index($6, "N")' | cut -f 1,2,3,4,5,6 | uniq  > {output.split_txt}
        touch {output.split_txt}
        echo {params.name_param}
        sed -i "s/$/\t{params.name_param}/" {output.split_txt}
        sed -i 's/\t/,/g' {output.split_txt}
        sed -i 1i"readname,flags,segment,left_pos,mapq,cigar,name" {output.split_txt}
        """

rule divrge:
    input:
        ref=config["params"]["ref"],
        features=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".FeaturesOutput.csv",
        deletions=config["params"]["output"] + "N_files/{sample}." + config["params"]["strain"].upper() + ".split.txt",
    output:
        final_one=config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv"
    group: "post"
    params:
        strain=config["params"]["strain"].upper(),
        mis=config["divrge_param"]["mismatch"],
        gap_size=config["divrge_param"]["gap_size"],
        align_len=config["divrge_param"]["align_length"],
        group_size=config["divrge_param"]["group_size"],
        save_dir=config["params"]["output"] + "DVG/",
        script_dir=config["params"]["script_dir"],
        env_path=config["params"]["venv_path"],
        ninput=config["divrge_param"]["ninput"],
        njob_number=config["divrge_param"]["ncores"],
    envmodules:
        config["mod_params"]["python_mod"],
    threads:4,
    shell:
        """
        source {params.env_path}

        python3 {params.script_dir}DiVRGE.py \
            --strain {params.strain} \
            --ref {input.ref} \
            --file {input.deletions} \
            --idx {input.features} \
            --save_dir {params.save_dir} \
            --align_length {params.align_len} \
            --gap_size {params.group_size} \
            --total_mismatch {params.mis}  \
            --group_bw {params.group_size} \
            --nbams {params.ninput} \
            --njob {params.njob_number}

        touch {output.final_one}

        deactivate
        """

rule concat_files:
    input:
        dvg_files=expand(config["params"]["output"] + "DVG/{sample}.DVG.FINAL.OneGap." + config["params"]["strain"].upper() + ".N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv", sample = SAMPLES),
    output:
        catfile=config["params"]["output"] + "DVG/" + config["params"]["strain"].upper() + ".DVG.FINAL.OneGap." + "N" + config['divrge_param']['gap_size'] + ".Mis" + config["divrge_param"]["mismatch"] + ".M" + config["divrge_param"]["align_length"] + ".G" + config["divrge_param"]["group_size"] + ".csv",
    group: "last"
    params:
        direct=config["params"]["output"] + "DVG/",
        strain=config["params"]["strain"].upper()
    shell:
        """
        awk '(NR == 1) || (FNR > 1)' {params.direct}*FINAL.OneGap.{params.strain}* > {output.catfile}
        """
